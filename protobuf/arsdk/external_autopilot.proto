syntax = "proto3";

package arsdk.externalautopilot;

import "parrot/protobuf/extensions.proto";
import "google/protobuf/empty.proto";

option java_package = "com.parrot.drone.arsdk.externalautopilot";
option java_outer_classname = "ExternalAutopilot";

option (olympe_package) = "externalautopilot";

// This is the entry point to send messages to the drone
message Command {
    reserved 1 to 15; // reserved for non-acknowledged commands

    oneof id {
        google.protobuf.Empty get_state = 16;
        google.protobuf.Empty get_config = 17;
        google.protobuf.Empty get_connection_state = 18;
        google.protobuf.Empty get_capabilities = 19;
        SetVehicleMode set_vehicle_mode = 20;
    }

    message SetVehicleMode {
        VehicleMode vehicle_mode = 1;
    }
}

// This is the entry point to receive messages from the drone.
message Event {
    reserved 1 to 15; // reserved for non-acknowledged events

    oneof id {
        State state = 16;
        Configuration config = 17;
        ConnectionState connection_state = 18;
        Capabilities capabilities = 19;
        Log log = 20;
    }

    // Drone capabilities.
    message Capabilities {
        repeated VehicleMode supported_vehicle_modes = 1;
    }

    // Connection of the external autopilot
    message ConnectionState {
        bool connected = 1;
        bool ahrs_connected = 2; // Attitude and Heading Reference System
    }

    // Log message.
    message Log {
        MessageType type = 1;
        string msg = 2;
    }

    // Drone state.
    message State {
        AutopilotAlert alert = 1;
        bool takeoff_ready = 2;
        AutopilotFlightMode flight_mode = 3;
        VehicleMode vehicle_mode = 4;
    }

    // Drone configuration and parameters.
    message Configuration {
        map<string, string> flight_parameters = 1; // key/value pair of parameters for sensor and estimation
        VehicleType vehicle_type = 2;
    }
}

enum VehicleType {
    VEHICLE_TYPE_MULTICOPTER = 0;
    VEHICLE_TYPE_VTOL = 1;
    VEHICLE_TYPE_HELICOPTER = 2;
    VEHICLE_TYPE_PLANE = 3;
}

enum VehicleMode {
    VEHICLE_MODE_COPTER = 0;
    VEHICLE_MODE_PLANE = 1;
}

enum AutopilotAlert {
    AUTOPILOT_ALERT_OK = 0;
}

enum AutopilotFlightMode {
    AUTOPILOT_FLIGHT_MODE_UNKNOWN = 0;
    AUTOPILOT_FLIGHT_MODE_STABILIZE = 1;
    AUTOPILOT_FLIGHT_MODE_GUIDED = 2;
    AUTOPILOT_FLIGHT_MODE_LANDING = 3;
    AUTOPILOT_FLIGHT_MODE_MANUAL = 4;
    AUTOPILOT_FLIGHT_MODE_PLANE = 5;
    AUTOPILOT_FLIGHT_MODE_HOVER = 6;
}

enum MessageType {
    SUCCESS = 0;
    WARNING = 1;
    ERROR = 2;
}
