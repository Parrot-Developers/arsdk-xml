syntax = "proto3";

package arsdk.logsync;

import "parrot/protobuf/extensions.proto";
import "google/protobuf/empty.proto";

option java_package = "com.parrot.drone.arsdk.logsync";
option java_outer_classname = "Logsync";

option (olympe_package) = "logsync";

/*
 * Command and Event in this file are expected to be sent both in "normal"
 * direction (Command from controller to device, Event from device to
 * controller) and "reverse" direction (Command from device to controller, Event
 * from controller to device)
 */
option (arsdk_direction) = "both";

/*
 * Those commands are expected to be automatically sent and handled by
 * the different nodes.
 * User code should *not* send nor listen to these commands.
 */

enum Role {
  /* The node is an edge controller (e.g. a mobile device or a computer) */
  ROLE_CONTROLLER = 0;
  /* The node is a sky controller (e.g. any MPPx device) */
  ROLE_SKY_CONTROLLER = 1;
  /* The node is a drone (edge device, e.g. any Anafi model) */
  ROLE_DRONE = 2;
  /* The node is a remote antenna used by a SKY_CONTROLLER */
  ROLE_REMOTE_ANTENNA = 3;
}

enum Model {
  /* The node mode is unknown or unspecified */
  MODEL_UNKNOWN = 0;
  /* The node is an Android device */
  MODEL_ANDROID_DEVICE = 1;
  /* The node is an iOS device */
  MODEL_IOS_DEVICE = 2;
  /* The node is a generic computer */
  MODEL_COMPUTER = 3;

  /* Values from the `arsdk_device_type` enum found in
   * `libarsdk/include/arsdk/arsdk_backend.h` are also valid as `Model`
   * values, except for the `ARSDK_DEVICE_TYPE_UNKNOWN` value which
   * should be coded as `MODEL_UNKNOWN` (0) */
}

message Command {
  reserved 1 to 15; /* reserved for non-acknowledged commands */

  oneof id {
    /* When a sync_request is recieved, the receiver must send back all
     * of the available Events to allow the sender to properly sync its
     * log files */
    google.protobuf.Empty sync_request = 16;
  }
}

message Node {
  /* A unique-id generated by the node at each boot. The definition of what a
   * "boot" is might depend on the node type */
  string boot_id = 1;
  /* The model of the node. */
  uint32 model = 2;
  /* The role of the node in the arsdk chain */
  Role role = 3;
}

message Event {
  reserved 1 to 15; /* reserved for non-acknowledged events */

  oneof id {
    /**
    * Description of a node in the arsdk chain, including its role.
    * This message can be received multiple times with different meanings :
    * - from different nodes (e.g. from one ROLE_REMOTE_CONTROLLER and one
    *   ROLE_DRONE node) from a single sync_request
    * - from a single node which changed some of its informations
    * - from a single node, due to a sync_request sent by another node
    *   (in this case it should probably be ignored if all fields have the same
    *   value as the previous one)
    */
    Node identifier = 16;
  }
}
